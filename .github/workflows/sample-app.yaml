name: Application CI

on:
  push:
    branches:
    - 'main'
    - 'develop'
    - 'release/**'
    - 'releases/**'
    - 'hotfix/**'
    - 'feature/**'
    - 'feat/**'
    paths-ignore:
    - 'docs/**'
  
jobs:
  build-and-push:
    runs-on: ubuntu-latest
    outputs:
      IS_DEV_ENV: ${{ steps.docker-image.outputs.IS_DEV_ENV }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Create Docker image name
      id: docker-image
      run: |
        BRANCH_NAME=$(echo ${{ github.ref_name }} | sed 's/\//_/g')
        echo "Branch name: ${BRANCH_NAME}"

        IS_DEVELOP=$(echo "${BRANCH_NAME}" | grep -q '^develop$' && echo true || echo false)
        echo "Is develop branch: ${IS_DEVELOP}"
        
        IS_FEATURE=$(echo "${BRANCH_NAME}" | grep -Eq '^feature_|^feat_' && echo true || echo false)
        echo "Is feature branch: ${IS_FEATURE}"
        
        IS_DEV_ENV=$(echo "${IS_DEVELOP} || ${IS_FEATURE}" | bc)
        echo "::set-output name=IS_DEV_ENV::${IS_DEV_ENV}"
        echo "Is development environment: ${IS_DEV_ENV}"

        IMAGE_NAME=${BRANCH_NAME}_${{ github.sha }}
        echo "IMAGE_NAME=${IMAGE_NAME}" >> $GITHUB_ENV

    - name: Extract repository name
      id: repository
      run: |
        REPO_NAME=$(echo "${{ github.repository }}" | cut -d '/' -f 2)
        echo "REPO_NAME=${REPO_NAME}" >> $GITHUB_OUTPUT

    - name: Login to Docker registry
      uses: docker/login-action@v3
      with:
        registry: docker.io
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: |
          docker.io/${{ secrets.DOCKER_USERNAME }}/${{ steps.repository.outputs.REPO_NAME }}:${{ env.IMAGE_NAME }}

    - name: Retrieve Docker image digest
      id: image-digest
      run: |
        IMAGE_DIGEST=$(docker inspect --format='{{index .RepoDigests 0}}' "${{ secrets.DOCKER_USERNAME }}/${{ steps.repository.outputs.REPO_NAME }}:${{ env.IMAGE_NAME }}" | cut -d '@' -f 2)
        echo "IMAGE_DIGEST=${IMAGE_DIGEST}" >> $GITHUB_ENV

  push-helm-files:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: needs.build-and-push.outputs.IS_DEV_ENV == 'true'
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        ref: ${{ github.sha }}

    - name: Setup yq tools
      uses: mikefarah/yq@v4.35.2
      
    - name: Update yaml files
      run: |
        CHART_VERSION="$(cat VERSION_HELM)"
        HELM_FOLDER=${{ vars.HELM_FOLDER_PATH }}
        RUN_NUMBER=${{ github.run_number }}
        IMAGE_NAME=${{ env.IMAGE_NAME }}
        IMAGE_DIGEST=${{ env.IMAGE_DIGEST }}

        DOCKER_USERNAME=${{ secrets.DOCKER_USERNAME }}
        REPO_NAME=${{ steps.repository.outputs.REPO_NAME }}

        yq eval -i ".version = \"${CHART_VERSION}.${RUN_NUMBER}\"" "./${HELM_FOLDER}/Chart.yaml"
        yq eval -i ".appVersion = \"$(cat VERSION)\"" "./${HELM_FOLDER}/Chart.yaml"

        yq eval -i ".image.repository = \"${DOCKER_USERNAME}/${REPO_NAME}\"" "./${HELM_FOLDER}/values.yaml"
        yq eval -i ".image.tag = \"${IMAGE_NAME}@${IMAGE_DIGEST}\"" "./${HELM_FOLDER}/values.yaml"

    - name: Commit and push changes
      run: |
        git config user.name "${GITHUB_ACTOR}"
        git config user.email "${GITHUB_ACTOR}@users.noreply.github.com"
        git add .
        git diff --quiet && git diff --staged --quiet || git commit -m "Update Helm files"
        git push

  push-helm-chart:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: needs.build-and-push.outputs.IS_DEV_ENV == 'false'
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        ref: ${{ github.sha }}

    - name: Setup yq tools
      uses: mikefarah/yq@v4.35.2
      
    - name: Update yaml files
      run: |
        CHART_VERSION="$(cat VERSION_HELM)"
        HELM_FOLDER=${{ vars.HELM_FOLDER_PATH }}
        RUN_NUMBER=${{ github.run_number }}
        IMAGE_NAME=${{ env.IMAGE_NAME }}
        IMAGE_DIGEST=${{ env.IMAGE_DIGEST }}

        DOCKER_USERNAME=${{ secrets.DOCKER_USERNAME }}
        REPO_NAME=${{ steps.repository.outputs.REPO_NAME }}

        yq eval -i ".version = \"${CHART_VERSION}.${RUN_NUMBER}\"" "./${HELM_FOLDER}/Chart.yaml"
        yq eval -i ".appVersion = \"$(cat VERSION)\"" "./${HELM_FOLDER}/Chart.yaml"

        yq eval -i ".image.repository = \"${DOCKER_USERNAME}/${REPO_NAME}\"" "./${HELM_FOLDER}/values.yaml"
        yq eval -i ".image.tag = \"${IMAGE_NAME}@${IMAGE_DIGEST}\"" "./${HELM_FOLDER}/values.yaml"

    - name: Set up Helm
      uses: azure/setup-helm@v3
      with:
        version: 'v3.11.1'

    - name: Package Helm Chart
      run: |
        helm package ./${{ vars.HELM_FOLDER_PATH }}
        helm repo index ./${{ vars.HELM_FOLDER_PATH }} --url ${{ vars.HELM_REPO_URL }}

    - name: Clone Helm Chart repo
      uses: actions/checkout@v3
      with:
        repository: john-afrano/helm-repository
        ref: pre-deployment
        token: ${{ secrets.HELM_REPO_PAT }}
        path: ./helm-repository

    - name: Replace the Helm pkg
      run: |
        mkdir -p ./helm-repository/app/${{ steps.repository.outputs.REPO_NAME }}
        cp *.tgz ./helm-repository/app/${{ steps.repository.outputs.REPO_NAME }}/

    - name: Commit and push
      run: |
        cd helm-repository
        git config user.name "${GITHUB_ACTOR}"
        git config user.email "${GITHUB_ACTOR}@users.noreply.github.com"
        git pull origin pre-deployment
        git add .
        git commit -m "${{ github.ref_name }}"
        git push origin pre-deployment
